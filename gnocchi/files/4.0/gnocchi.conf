{%- from "gnocchi/map.jinja" import cfg,server,statsd with context %}
{%- set storage = cfg.get('storage', {}) %}
{%- set _database = cfg.database %}

{%- set connection_x509_ssl_option = '' %}
{%- if _database.get('x509',{}).get('enabled',False) %}
  {%- set connection_x509_ssl_option = '&ssl_ca=' ~ _database.x509.ca_file ~ '&ssl_cert=' ~ _database.x509.cert_file ~ '&ssl_key=' ~ _database.x509.key_file %}
{%- elif _database.get('ssl',{}).get('enabled',False) %}
  {%- set connection_x509_ssl_option = '&ssl_ca=' ~ _database.ssl.cacert_file %}
{%- endif %}

[DEFAULT]

debug = {{ cfg.debug }}

[api]

auth_mode = {{ server.identity.engine }}

{%- if server.get('api', {}).max_limit is defined %}
max_limit = {{ server.api.max_limit }}
{%- endif %}

{%- if server.get('api', {}).refresh_timeout is defined %}
refresh_timeout = {{ server.api.refresh_timeout }}
{%- endif %}


[archive_policy]

{%- if server.get('archive_policy', {}).default_aggregation_methods is defined %}
default_aggregation_methods = {{ ','.join(server.archive_policy.default_aggregation_methods) }}
{%- endif %}


[incoming]

{%- set _storage = storage.get('incoming', {}) %}
{%- if _storage.driver is defined %}
driver = {{ _storage.driver }}
{% include "gnocchi/files/" + cfg.version|string + "/storage/_" + _storage.driver + ".conf" %}
{%- endif %}

[indexer]

url = {{ cfg.database.engine }}+pymysql://{{ cfg.database.user }}:{{ cfg.database.password }}@{{ cfg.database.host }}/{{ cfg.database.name }}?charset=utf8{{ connection_x509_ssl_option|string }}


[keystone_authtoken]

{%- if server.identity.engine == 'keystone' %}
user_domain_id = {{ server.identity.get('domain', 'default') }}
project_domain_id = {{ server.identity.get('domain', 'default') }}
project_name = {{ server.identity.tenant }}
username = {{ server.identity.user }}
password = {{ server.identity.password }}
auth_uri = {{ server.identity.get('protocol', 'http') }}://{{ server.identity.host }}:{{ server.identity.private_port }}
auth_url = {{ server.identity.protocol }}://{{ server.identity.host }}:{{ server.identity.port }}
{%- if server.identity.protocol == 'https' %}
cafile={{ server.identity.get('cacert_file', server.cacert_file) }}
{%- endif %}

{%- if server.identity.auth_type is defined %}
auth_type = {{ server.identity.auth_type }}
{%- endif %}

{%- endif %}

{%- if server.get('cache', {}).members is defined %}
memcached_servers={%- for member in server.cache.members %}{{ member.host }}:{{ member.port }}{% if not loop.last %},{% endif %}{%- endfor %}
{%- endif %}

{%- if server.get('cache', {}).token_cache_time is defined %}
token_cache_time = {{ server.cache.token_cache_time }}
{%- endif %}

{%- if server.get('cache', {}).memcache_security_strategy is defined %}
memcache_security_strategy = {{ server.cache.memcache_security_strategy }}
{%- endif %}

{%- if server.get('cache', {}).memcache_security_strategy is defined %}
memcache_secret_key = {{ server.cache.memcache_secret_key }}
{%- endif %}

{%- if server.get('cache', {}).memcache_pool_dead_retry is defined %}
memcache_pool_dead_retry = {{ server.cache.memcache_pool_dead_retry }}
{%- endif %}

{%- if server.get('cache', {}).memcache_pool_maxsize is defined %}
memcache_pool_maxsize = {{ server.cache.memcache_pool_maxsize }}
{%- endif %}

{%- if server.get('cache', {}).memcache_pool_socket_timeout is defined %}
memcache_pool_socket_timeout = {{ server.cache.memcache_pool_socket_timeout }}
{%- endif %}

{%- if server.get('cache', {}).memcache_pool_unused_timeout is defined %}
memcache_pool_unused_timeout = {{ server.cache.memcache_pool_unused_timeout }}
{%- endif %}

{%- if server.get('cache', {}).memcache_pool_conn_get_timeout is defined %}
memcache_pool_conn_get_timeout = {{ server.cache.memcache_pool_conn_get_timeout }}
{%- endif %}

[metricd]

{%- if server.get('metricd', {}).workers is defined %}
workers = {{ server.metricd.workers }}
{%- endif %}

{%- if server.get('metricd', {}).metric_processing_delay is defined %}
metric_processing_delay = {{ server.metricd.metric_processing_delay }}
{%- endif %}

{%- if server.get('metricd', {}).metric_reporting_delay is defined %}
metric_reporting_delay = {{ server.metricd.metric_reporting_delay }}
{%- endif %}

{%- if server.get('metricd', {}).metric_cleanup_delay is defined %}
metric_cleanup_delay = {{ server.metricd.metric_cleanup_delay }}
{%- endif %}

{%- if server.get('metricd', {}).worker_sync_rate is defined %}
worker_sync_rate = {{ server.metricd.worker_sync_rate }}
{%- endif %}

{%- if server.get('metricd', {}).processing_replicas is defined %}
processing_replicas = {{ server.metricd.processing_replicas }}
{%- endif %}


[oslo_middleware]

{%- if server.enable_proxy_headers_parsing is defined %}
enable_proxy_headers_parsing = {{ server.enable_proxy_headers_parsing }}
{%- endif %}

[statsd]

{%- if statsd.get('bind', {}).address is defined %}
host = {{ statsd.bind.address }}
{%- endif %}

{%- if statsd.get('bind', {}).port is defined %}
port = {{ statsd.bind.port }}
{%- endif %}

{%- if statsd.get('enabled', False) %}
resource_id = {{ statsd.resource_id }}
{%- endif %}

{%- if statsd.user_id is defined and statsd.project_id is defined %}
creator = {{ statsd.user_id }}:{{ statsd.project_id }}
{%- endif %}

{%- if statsd.archive_policy_name is defined %}
archive_policy_name = {{ statsd.archive_policy_name }}
{%- endif %}

{%- if statsd.flush_delay is defined %}
flush_delay = {{ statsd.flush_delay }}
{%- endif %}


[storage]

{%- set _storage = storage %}
{%- if _storage.driver is defined %}
driver = {{ _storage.driver }}
{% include "gnocchi/files/" + cfg.version|string + "/storage/_" + _storage.driver + ".conf" %}
{%- endif %}

{%- if storage.aggregation_workers is defined %}
aggregation_workers_number = {{ storage.aggregation_workers }}
{%- endif %}

{%- if cfg.coordination_backend is defined %}
coordination_url = {{ cfg.coordination_backend.url }}
{%- endif %}
